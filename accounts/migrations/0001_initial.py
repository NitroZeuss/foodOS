# Generated by Django 5.2.1 on 2025-05-31 17:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('recipes', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('height_cm', models.FloatField(blank=True, null=True)),
                ('weight_kg', models.FloatField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('diet_type', models.CharField(choices=[('vegetarian', 'Vegetarian'), ('vegan', 'Vegan'), ('non_vegetarian', 'Non-Vegetarian'), ('pescatarian', 'Pescatarian'), ('keto', 'Keto'), ('paleo', 'Paleo'), ('open', 'Open to All')], default='open', max_length=30)),
                ('has_diabetes', models.BooleanField(default=False)),
                ('is_lactose_intolerant', models.BooleanField(default=False)),
                ('is_gluten_intolerant', models.BooleanField(default=False)),
                ('is_allergic_to_nuts', models.BooleanField(default=False)),
                ('other_allergies', models.TextField(blank=True)),
                ('favorite_ingredients', models.TextField(blank=True, help_text="Comma-separated e.g. 'garlic, cheese, basil'")),
                ('disliked_ingredients', models.TextField(blank=True, help_text="Comma-separated e.g. 'onion, chili'")),
                ('taste_profile', models.CharField(blank=True, help_text='e.g. spicy, sweet, tangy, bland', max_length=255)),
                ('favorite_cuisines', models.TextField(blank=True, help_text='e.g. Indian, Thai, Italian')),
                ('avoid_cuisines', models.TextField(blank=True, help_text='e.g. Chinese, Continental')),
                ('preferred_meal_times', models.JSONField(blank=True, default=dict, help_text='e.g. {"breakfast": "08:00", "lunch": "13:00", "dinner": "20:00"}')),
                ('fitness_goal', models.CharField(blank=True, help_text='e.g. weight loss, muscle gain, maintenance', max_length=100)),
                ('daily_calorie_limit', models.PositiveIntegerField(blank=True, null=True)),
                ('meal_frequency', models.PositiveIntegerField(default=3, help_text='How many meals they want daily')),
                ('feedback_notes', models.TextField(blank=True, help_text='User feedback for personalized AI analysis')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('most_disliked_recipes', models.ManyToManyField(blank=True, related_name='disliked_by', to='recipes.recipe')),
                ('most_liked_recipes', models.ManyToManyField(blank=True, related_name='liked_by', to='recipes.recipe')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
